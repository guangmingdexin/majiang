1. 多个玩家进行随机匹配，会出现玩家信息不完善（direction = null, base64 = null）
# 1. 是否为 direction 分配算法出现问题（调整为固定数据进行尝试）
# 确定为 direction 的分配算法有问题
代码：
boolean[] dire = new boolean[NEED_MATCH_PLAYER_COUNT];
 for (GameUser player : matchPoolPlayer) {

   while(player.getDirection() == null) {
                   // 计算 hashCode
                   int i  = (System.identityHashCode(player) % 4);
                   // 死循环？造成玩家信息不完善
                   // 但是为什么会造成 匹配成功的信息出现？
                   if(!dire[i]) {
                       player.setDirection(Direction.valueOf(i));
                       dire[i] = true;
                   }
                   System.out.println("look for direction " + i);
               }
 }

 2. 在将 房间信息发送给不同玩家时，无法通过修改房间信息，来改变发送内容
 代码：
 for (GameUser player : room.getPlayers()) {
                 List<Integer> useCards = player.getGameInfoCard().getUseCards();
                 Collections.sort(useCards);
                 room.setNumCards(useCards);
                 Channel channel = ServerCache.getChannel(player.getUserId());
                 AuthResponseMessage response = new AuthResponseMessage();
                 // TODO 是否能保证发送 room 对象不同
                 room.setNumCards(player.getGameInfoCard().getUseCards());
                 ResponseUtil.responseBuildFactory(response, room, 200, Event.RANDOMGAME, "发牌成功！", true);
                 channel.writeAndFlush(response);
                 System.out.println("发送成功！");
             }
         });


 3. 在多线程状态下使用 Jedis 会发生错误
 主要错误：
 一、java.net.SocketException: Socket closed
 java.net.SocketException: Socket is not connected
 java.net.SocketException: Connection reset 以及一些其他错误
 错误原因：
 jedis在执行每一个命令之前都会先执行connect方法，socket是一个共享变量，在多线程的情况下可能存在：
 线程1执行到了
  socket = new Socket();
  outputStream = new RedisOutputStream(socket.getOutputStream());
  inputStream = new RedisInputStream(socket.getInputStream());
  线程2执行到了：
  socket = new Socket();
  线程2
  socket.connect(new InetSocketAddress(host, port), connectionTimeout);

  因为线程2重新初始化了socket但是还没有执行connect，所以线程1执行socket.getOutputStream()或者socket.getInputStream()就会抛出java.net.SocketException: Socket is not connected。java.net.SocketException: Socket closed是因为socket异常导致共享变量socket关闭了引起的。
二、共享数据流引起的异常
Protocol error: invalid multibulk lengt是因为多线程通过RedisInputStream和RedisOutputStream读写缓冲区的时候引起的问题造成的数据问题不满足RESP协议引起的。举个简单的例子，例如多个线程执行命令,线程1执行 set hello world命令。

本来应该发送：

*3\r\n$3\r\nSET\r\n$5\r\nhello\r\n$5\r\nworld\r\n

但是线程执行写到

*3\r\n$3\r\nSET\r\n$5\r\nhello\r\n

然后被挂起了，线程2执行了写操作写入了' '，然后线程1继续执行，最后发送到redis服务器端的数据可能就是：

*3\r\n$3\r\nSET\r\n$5\r\nhello\r\n' '$5\r\nworld\r\n

至于java.net.SocketException: Connection reset或ReadTimeout错误，是因为redis服务器接受到错误的命令，执行了socket.close这样的操作，关闭了连接。服务器会返回复位标志"RST"，但是客户端还在继续执行读写数据操作。
 解决方案：使用 try-catch-finally语句块关闭使用完成的redis连接(无法解决问题)

使用线程池化技术，每次连接返回一个新的 Jedis
 JedisPool jp = new JedisPool(jpc, (String) defaultYaml.get("host"), (int)defaultYaml.get("port"));
 Jedis jedis = jp.getResource();

 4.在特殊事件发生的时候，无法进行回合切换
 5.摸牌渲染事件，会发生棋牌覆盖
 原因：
 children.remove(index, size);
 第 index 个元素没有被删除(出现情况 value 值相同，最后一个元素)

 // 1. 未完成模板
 // 1.1 计时模块
 // 1.2 好友排行榜摸块


 // 下面的任务
 // 1. 刷题
 // 2. 刷面经
 // 3. 看书
 // 4. 准备面试

